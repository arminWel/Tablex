---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by arminw.
--- DateTime: 26/11/24 14:09
---
local luaunit = require('luaunit')

local Table = require('tablex.table')

local function captureWarnings(func)
    local oldWarn = warn
    local warnings = {}
    warn = function(message)
        table.insert(warnings, message)
    end
    func()
    warn = oldWarn
    return warnings
end

function luaunit.assertWarnMsgContains(expectedMessage, func)
    local warnings = captureWarnings(func)
    luaunit.assertNotEquals(#warnings, 0)
    luaunit.assertNotEquals(warnings[1]:find(expectedMessage), nil)
    return warnings
end

function testEmptyTable()
    local t = Table.new(0, 0)
    luaunit.assertEquals(t:export(), "")
end

function testSingleCellTable()
    local t = Table.new(1, 1)
    t.data[1][1] = "a"
    luaunit.assertEquals(t:export(), "a\\\\\n")
end

function testMultipleCellsInRow()
    local t = Table.new(1, 3)
    t.data[1][1] = "a"
    t.data[1][2] = "b"
    t.data[1][3] = "c"
    luaunit.assertEquals(t:export(), "a&b&c\\\\\n")
end

function testMultipleRows()
    local t = Table.new(2, 2)
    t.data[1][1] = "a"
    t.data[1][2] = "b"
    t.data[2][1] = "c"
    t.data[2][2] = "d"
    luaunit.assertEquals(t:export(), "a&b\\\\\nc&d\\\\\n")
end

function testEmptyStringsInCells()
    local t = Table.new(2, 2)
    t.data[1][1] = ""
    t.data[1][2] = ""
    t.data[2][1] = ""
    t.data[2][2] = ""
    luaunit.assertEquals(t:export(), "&\\\\\n&\\\\\n")
end

function testCurrentField()
    local t = Table.new(2, 2)
    t.data[1][1] = "a"
    luaunit.assertEquals(t:currentField(), "a")
end

function testInsertInCurrentField()
    local t = Table.new(2, 2)
    t:insertInCurrentField("b")
    luaunit.assertEquals(t.data[1][1], "b")
end

function testMoveCursorRight()
    local t = Table.new(2, 2)
    t:moveCursorRight()
    luaunit.assertEquals(t.currentCol, 2)
end

function testMoveCursorLeft()
    local t = Table.new(2, 2)
    t:moveCursorRight()
    t:moveCursorLeft()
    luaunit.assertEquals(t.currentCol, 1)
end

function testMoveCursorDown()
    local t = Table.new(2, 2)
    t:moveCursorDown()
    luaunit.assertEquals(t.currentRow, 2)
end

function testMoveCursorUp()
    local t = Table.new(2, 2)
    t:moveCursorDown()
    t:moveCursorUp()
    luaunit.assertEquals(t.currentRow, 1)
end

function testMoveCursorRightWarning()
    local t = Table.new(2, 2)
    luaunit.assertWarnMsgContains("Cannot move cursor right by 2", function() t:moveCursorRight(2) end)
    luaunit.assertEquals(t.currentCol, 2)
end

function testMoveCursorLeftWarning()
    local t = Table.new(2, 2)
    luaunit.assertWarnMsgContains("Cannot move cursor left by 2", function() t:moveCursorLeft(2) end)
    luaunit.assertEquals(t.currentCol, 1)
end

function testMoveCursorDownWarning()
    local t = Table.new(2, 2)
    luaunit.assertWarnMsgContains("Cannot move cursor down by 2", function() t:moveCursorDown(2) end)
    luaunit.assertEquals(t.currentRow, 2)
end

function testMoveCursorUpWarning()
    local t = Table.new(2, 2)
    luaunit.assertWarnMsgContains("Cannot move cursor up by 2", function() t:moveCursorUp(2) end)
    luaunit.assertEquals(t.currentRow, 1)
end

os.exit(luaunit.LuaUnit.run())
